Spring boot microservice project step by step:
======================================================
Services		Port Numbers:		
------------------------------------
Product Service			8080
Order Service			8081
Inventory Service		8082
Notification Service	8083
gateway					9000
-------------------------------------

products
orders
inventroy
notifications



As i am getting problem with volumes:
------------------------------------
i need to create databse manually...
CREATE DATABASE IF NOT EXISTS order_service;
CREATE DATABASE IF NOT EXISTS inventory_service;


Product Service
================
CREATE PRODUCT	 	POST	/api/product/
READ ALL PRODUCTS	GET	  /api/product/

Step 1: choose dependencies:
---------------------
Lombok, Spring Web, Test Containers, Spring Data MongoDB

docker-compose.yml
---------------
version: '4'
services:
  mongodb:
    image: mongo:7.0.5
    container_name: mongodb
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_DATABASE: product-service
#    volumes:
#      - ./data/mongodb:/data/db
  mysql:
    image: mysql:8.3.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    ports:
      - "3316:3306"
#    volumes:
#      - ./data/mysql:/var/lib/mysql
#      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql



application.properties
-----------------------
spring.application.name=products
spring.data.mongodb.uri=mongodb://localhost:27018/product-service



Rest endpoints:
----------------
@Document(value = "product")
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Data
public class Product {

    @Id
    private String id;
    private String name;
    private String description;
    private BigDecimal price;
}

Dto:
----
public class ProductDto {

    private String id;
    private String name;
    private String description;
    private BigDecimal price;
}

convertion class
----------------------

public class ConvertUtil {
    public static Product toProduct(ProductDto productDto) {
        Product product = Product.builder()
        		.id(productDto.getId())
        		.name(productDto.getName())
        		.description(productDto.getDescription())
        		.price(productDto.getPrice())
        		.build();
        return product;

    }
    public static ProductDto toProductDto(Product product) {
        ProductDto productDto = ProductDto.builder()
        		.id(product.getId())
        		.name(product.getName())
        		.description(product.getDescription())
        		.price(product.getPrice())
        		.build();
        return productDto;

    }
}

repo:
----
public interface ProductRepo extends MongoRepository<Product, String> {
}

service layer:
--------------

public interface ProductService{
	public ProductDto createProduct(ProductDto productRequest);
	public List<ProductDto> getAllProducts();
}



@Service
@AllArgsConstructor
public class ProductServiceImpl implements ProductService{

    private final ProductRepo productRepository;
    @Override
    public ProductDto createProduct(ProductDto productRequest) {
        Product product= ConvertUtil.toProduct(productRequest);
        productRepository.save(product);
        return ConvertUtil.toProductDto(product);
    }

    @Override
    public List<ProductDto> getAllProducts() {
        return productRepository.findAll().stream()
                .map(ConvertUtil::toProductDto).toList();
    }
}


controller layer:
---------------
@RestController
@RequestMapping("/api/products")
@RequiredArgsConstructor
public class ProductController {

    private final ProductService productService;

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public ProductDto createProduct(@RequestBody ProductDto productDto) {
       return productService.createProduct(productDto);
    }

    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public List<ProductDto> getAllProducts() {
        return productService.getAllProducts();
    }
}


Testing
---------

import static org.junit.jupiter.api.Assertions.*;

import com.orders.dto.ProductDto;
import io.restassured.RestAssured;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.testcontainers.containers.MongoDBContainer;

import java.math.BigDecimal;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class ProductControllerTest {

    @ServiceConnection
    static MongoDBContainer mongoDBContainer = new MongoDBContainer("mongo:7.0.7");

    @LocalServerPort
    private Integer port;

    @BeforeEach
    void setup() {
        RestAssured.baseURI = "http://localhost";
        RestAssured.port = port;
    }

    static {
        mongoDBContainer.start();
    }
    @Test
    void shouldCreateProduct() throws Exception {
        ProductDto productDto = getProductRequest();
        RestAssured.given()
                .contentType("application/json")
                .body(productDto)
                .when()
                .post("/api/products")
                .then()
                .log().all()
                .statusCode(201)
                .body("id", Matchers.notNullValue())
                .body("name", Matchers.equalTo(productDto.getName()))
                .body("description", Matchers.equalTo(productDto.getDescription()))
                .body("price", Matchers.is(productDto.getPrice().intValueExact()));
    }

    private ProductDto getProductRequest() {
        return new ProductDto("test", "test", new BigDecimal(1));
    }
}


Test container dependencies:
-------------------------
       <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>mongodb</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>5.3.2</version>
        </dependency>






Order service: 8081
======================
choose web, jpa, mysql, actuator, flyway migration

repo layer:
------------
@Entity
@Table(name = "t_orders")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String orderNumber;
    private String skuCode;
    private BigDecimal price;
    private Integer quantity;
}

public class OrderDto {
    private Long id;
    private String orderNumber;
    private String skuCode;
    private BigDecimal price;
    private Integer quantity;
}

public interface OrderRepository extends JpaRepository<Order, Long> {
}

service layer:
-------------
interface OrderService{
	 public OrderDto placeOrder(OrderDto orderDto);
}

@Service
@RequiredArgsConstructor
@Transactional
public class OrderServiceImpl implements OrderService {
    private final OrderRepository orderRepository;

    @Override
    public OrderDto placeOrder(OrderDto orderDto) {
        Order order = ConversionUtil.orderDtoToOrder(orderDto);
        orderRepository.save(order);
        return ConversionUtil.orderToOrderDto(order);
    }
}




controller layer:
--------------------

@RestController
@RequestMapping("/api/order")
@RequiredArgsConstructor
public class OrderController {

    private final OrderService orderService;

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public String placeOrder(@RequestBody OrderRequest orderRequest) {
        orderService.placeOrder(orderRequest);
        return "Order Placed Successfully";
    }
}


db.migration
-----------


V1__init.sql
--------------
CREATE TABLE `t_orders`
(
    `id`          bigint(20) NOT NULL AUTO_INCREMENT,
    `order_number` varchar(255) DEFAULT NULL,
    `sku_code`  varchar(255),
    `price`    decimal(19, 2),
    `quantity` int(11),
    PRIMARY KEY (`id`)
);


application.properties
------------------
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=none
server.port=8081




Inventory service: 8082
======================

docker-compose.yml
--------------------
version: '4'
services:
  mysql:
    image: mysql:8.3.0
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/mysql/data:/var/lib/mysql
	  
Note: create a folder mysql in root location and put 

init.sql
-------
CREATE DATABASE IF NOT EXISTS order_service;
CREATE DATABASE IF NOT EXISTS inventory_service;	
Repo layer:
-----------
@Entity
@Table(name = "t_inventory")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Inventory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String skuCode;
    private Integer quantity;
}

public record InventoryResponse(String skuCode, boolean isInStock) {
}

public interface InventoryRepository extends JpaRepository<Inventory, Long> {
    boolean existsBySkuCodeAndQuantityIsGreaterThanEqual(String skuCode, int quantity);
}




service layer:
------------
interface InventoryService{
	public boolean isInStock(String skuCode, Integer quantity) ;
}

@Service
@RequiredArgsConstructor
public class InventoryServiceImpl {

    private final InventoryRepository inventoryRepository;

    @Transactional(readOnly = true)
    public boolean isInStock(String skuCode, Integer quantity) {
        return inventoryRepository.existsBySkuCodeAndQuantityIsGreaterThanEqual(skuCode, quantity);
    }
}


controller layer:
--------------
@RestController
@RequestMapping("/api/inventory")
@RequiredArgsConstructor
public class InventoryController {

    private final InventoryService inventoryService;

    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public boolean isInStock(@RequestParam String skuCode, @RequestParam Integer quantity) {
        return inventoryService.isInStock(skuCode, quantity);
    }
}



application.properties
-----------------------
spring.application.name=inventory
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3316/inventory_service?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=none
server.port=8082



db migration
-------------
https://stackoverflow.com/questions/53173291/flyway-cannot-find-migrations-location-in
----------


db.migration

V1__initial_schema.sql
------------------------
CREATE TABLE `t_inventory`
(
    `id`       bigint(20) NOT NULL AUTO_INCREMENT,
    `sku_code`  varchar(255) DEFAULT NULL,
    `quantity` int(11)      DEFAULT NULL,
    PRIMARY KEY (`id`)
);

V2__add_inventory.sql
--------------------
insert into t_inventory (quantity, sku_code)
values (100, 'iphone_15'),
       (100, 'pixel_8'),
       (100, 'galaxy_24'),
       (100, 'oneplus_12');
	   
	   




add restassure for testing:
-----------------------------
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>5.3.2</version>
		</dependency>
  
spring boot testing:
--------------------

import com.jayway.jsonpath.JsonPath;
import io.restassured.RestAssured;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.testcontainers.containers.MySQLContainer;

import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class InventoryServiceApplicationTests {

    @ServiceConnection
    static MySQLContainer mySQLContainer = new MySQLContainer("mysql:8.3.0");
    @LocalServerPort
    private Integer port;

    @BeforeEach
    void setup() {
        RestAssured.baseURI = "http://localhost";
        RestAssured.port = port;
    }

    static {
        mySQLContainer.start();
    }

    @Test
    void shouldReadInventory() {
        var response = RestAssured.given()
                .when()
                .get("/api/inventory?skuCode=iphone_15&quantity=1")
                .then()
                .log().all()
                .statusCode(200)
                .extract().response().as(Boolean.class);
        assertTrue(response);

        var negativeResponse = RestAssured.given()
                .when()
                .get("/api/inventory?skuCode=iphone_15&quantity=1000")
                .then()
                .log().all()
                .statusCode(200)
                .extract().response().as(Boolean.class);
        assertFalse(negativeResponse);

    }

}



		
		











 Synchronous Communication between our Order Service and Inventory Service 
 using Spring Cloud OpenFeign
 ------------------------------
 Step 1: put Spring Cloud OpenFeign in order service
 
step 2:
 @FeignClient(value = "inventory", url = "${inventory.url}")
public interface InventoryClient {
    @RequestMapping(method = RequestMethod.GET, value = "/api/inventory")
    boolean isInStock(@RequestParam String skuCode, @RequestParam Integer quantity);
}

inventory.url=http://localhost:8082


 public void placeOrder(OrderRequest orderRequest) {
        boolean inStock = inventoryClient.isInStock(orderRequest.skuCode(), orderRequest.quantity());
        if (inStock) {
            var order = mapToOrder(orderRequest);
            orderRepository.save(order);
        } else {
            throw new RuntimeException("Product with Skucode " + orderRequest.skuCode() + "is not in stock");
        }
    }




Using wiremock:
-------------
 What if inventory service is down, or it is costly to call it as it is external service
 Now our Integration test no longer run successfully as we are calling the Inventory Service.

To make these test successful, we have to use a library called Wiremock that provides 
a mock server environment to test our Order Service by making some mock HTTP calls.

By using Wiremock, we can verify if our Order Service is calling the inventory 
service with correct URL Params/Request Body/ Path Variables or not.
 We can also stub the response and test how our service is responding for various scenarios.

To enable wiremock, we need to add the following
 dependency to our pom.xml file of Order Service

step 1:
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>
            <scope>test</scope>
        </dependency>
		

step 2: Apply AutoConfigureWireMock annotation on top of test class

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureWireMock(port = 0)
class OrderControllerTest {
}
	
step 3: create a stub

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;
public class InventoryClientStub {
    public static void stubInventoryCall(String skuCode, Integer quantity) {
        stubFor(get(urlEqualTo("/api/inventory?skuCode=" + skuCode + "&quantity=" + quantity))
                .willReturn(aResponse()
                        .withStatus(200)
                        .withHeader("Content-Type", "application/json")
                        .withBody("true")));
    }
}

Step 4: call InventoryClientStub in our application

    @Test
    void shouldSubmitOrder() {
        String submitOrderJson = """
                {
                     "skuCode": "iphone_15",
                     "price": 1000,
                     "quantity": 1
                }
                """;
        //call inventory stubservice before actual test call
        InventoryClientStub.stubInventoryCall("iphone_15", 1);
		//.........
	}
	
step 5: create resources folder in the test (as we have in main branch)
and provide configuration for inventory.url
as we dont know what port wiremock will use thats why we have to use 

inventory.url=http://localhost:${wiremock.server.port}








API gateway:
------------
step 1: choose api gateway, actuator

step 2:
define route:

@Configuration
public class Route {

    @Value("${product.service.url}")
    private String productServiceUrl;
	
    @Value("${order.service.url}")
    private String orderServiceUrl;
	
    @Value("${inventory.service.url}")
    private String inventoryServiceUrl;
	
    @Bean
    public RouterFunction<ServerResponse> productServiceRoute() {
        return GatewayRouterFunctions.route("product_service")
                .route(RequestPredicates.path("/api/products"), HandlerFunctions.http("http://localhost:8080"))
                .build();
    }
    @Bean
    public RouterFunction<ServerResponse> orderServiceRoute() {
        return GatewayRouterFunctions.route("order_service")
                .route(RequestPredicates.path("/api/orders"),
                        HandlerFunctions.http("http://localhost:8081"))
                .build();
    }

    @Bean
    public RouterFunction<ServerResponse> inventoryServiceRoute() {
        return GatewayRouterFunctions.route("inventory_service")
                .route(RequestPredicates.path("/api/inventory"), HandlerFunctions.http("http://localhost:8082"))
                .build();
    }

}


application.properties

spring.application.name=gateway
server.port=9000
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/master
# Actuator Endpoints
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


now check:
http://localhost:9000/api/inventory?skuCode=iphone_15&quantity=10











OAuth keyclock security on API gateway level (Client credential grant type):
------------------------------------------------------------------------------
step 1: docker compose 
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql
	  
	  
Step 2: start keycloak at 
http://localhost:8181/

login :admin/admin


What is relem?
-----------
	A realm manages a set of users, credentials, roles, and groups. 
	
	A user belongs to and logs into a realm. 
	
	Realms are isolated from one another and can only 
	manage and authenticate the users that they control.
	

step 3: 
create new relem "spring-ms-realm"



step 3: register client application with keycloak server:
---------------------------------------------------
client -> create client -> openid connect

provide:
client id: busycoder-cc

client name: busycoder-cc-app

enable client authentication--->auth flow --> service accounts roles (other dont select)
				two application try to communicate each other
				
copy client secret:

client secret: 4fxIPyNWIxsbQnUanv6SY01vrusbSsoB




step 4: getting access token form auth server in client credential grant flow:
------------------------------------------------------------------------------

go to relem setting-->
					open endpoint section

http://localhost:8181/realms/spring-ms-realm/.well-known/openid-configuration



{
"issuer": "http://localhost:8181/realms/spring-ms-realm",
 .....
 .....
}

now copy
http://localhost:8181/realms/spring-ms-realm



and put in application.properties
----------------------------
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-ms-realm


put configuration in spring boot project:
-----------------------------
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>
		
		
@Configuration
public class SecurityConfig {
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        return httpSecurity.authorizeHttpRequests(authorize -> authorize
                        .anyRequest().authenticated())
                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()))
                .build();
    }
}



Now if we want to access we will get 401
http://localhost:9000/api/products

Now how to access it?
------------------------
Select OAuth2 

http://localhost:8181/realms/spring-ms-realm/protocol/openid-connect/token

Configure new token:
----------------------
Token Name	:Token
Grant type : Client Credentials
Access Token URL : http://localhost:8181/realms/spring-ms-realm/protocol/openid-connect/token
Client ID: busycoder-cc
Client Secret: ZPrr8xKrdUiKnxiTS12Lx1m2u2KTuxaq
Scope: openid roles

understand token formate










Swagger (OpenAPI documentation of Project)
--------------------------------------

Step 1: add dep in all projects
----------------------------------
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-api</artifactId>
            <version>2.5.0</version>
        </dependency>


Step 2: Configuration openapi customization
------------------------------------------
@Configuration
public class OpenAPIConfig {

    @Bean
    public OpenAPI productServiceAPI() {
        return new OpenAPI()
                .info(new Info().title("Product Service API Busycoder")
                        .description("This is the REST API for Product Service")
                        .version("v0.0.1")
                        .license(new License().name("Apache 2.0")))
                .externalDocs(new ExternalDocumentation()
                        .description("You can refer to the Product Service Wiki Documentation")
                        .url("https://product-service-dummy-url.com/docs"));
    }
}

Step 3: customization of path
--------------------------------
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs


Step 4: explore swagger endpoint
http://localhost:8080/swagger-ui/index.html
http://localhost:8080/api-docs


Step 5: replicate same stuff in other services

order service:
------------
http://localhost:8081/swagger-ui/index.html
http://localhost:8081/api-docs


inventory service:
------------
http://localhost:8082/swagger-ui/index.html
http://localhost:8082/api-docs




Aggrigate documentation and by pass security for documentation:
-----------------------------------------------------------

Step 1: add swagger dep to the gateway project
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-api</artifactId>
            <version>2.5.0</version>
        </dependency>


Step 2: configure aggrigate endpoint for all services
	so that all must be visible as drop down list
	
	
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

springdoc.swagger-ui.urls[0].name=Product Service
springdoc.swagger-ui.urls[0].url=/aggregate/product-service/v3/api-docs
springdoc.swagger-ui.urls[1].name=Order Service
springdoc.swagger-ui.urls[1].url=/aggregate/order-service/v3/api-docs
springdoc.swagger-ui.urls[2].name=Inventory Service
springdoc.swagger-ui.urls[2].url=/aggregate/inventory-service/v3/api-docs

Step 3: now we have to create routes so that whenever brower is sending req to 
/aggregate/product-service/v3/api-docs
request must be send to product documentation


@Configuration
public class Routes {

    @Value("${product.service.url}")
    private String productServiceUrl;
	
    @Value("${order.service.url}")
    private String orderServiceUrl;
	
    @Value("${inventory.service.url}")
    private String inventoryServiceUrl;
	
	
    @Bean
    public RouterFunction<ServerResponse> productServiceSwaggerRoute() {
        return GatewayRouterFunctions.route("product_service_swagger")
                .route(RequestPredicates.path("/aggregate/product-service/v3/api-docs"),
                        HandlerFunctions.http("http://localhost:8080"))
                                .filter(setPath("/api-docs"))
                                .build();
    }

    @Bean
    public RouterFunction<ServerResponse> orderServiceSwaggerRoute() {
        return GatewayRouterFunctions.route("order_service_swagger")
                .route(RequestPredicates.path("/aggregate/order-service/v3/api-docs"),
                        HandlerFunctions.http("http://localhost:8081"))
                .filter(setPath("/api-docs"))
                .build();
    }


    @Bean
    public RouterFunction<ServerResponse> inventoryServiceSwaggerRoute() {
        return GatewayRouterFunctions.route("inventory_service_swagger")
                .route(RequestPredicates.path("/aggregate/inventory-service/v3/api-docs"),
                        HandlerFunctions.http("http://localhost:8082"))
                .filter(setPath("/api-docs"))
                .build();
    }

}

Step 4: now try
http://localhost:9000/swagger-ui/index.html

but we need to by pass security for swagger endpoints
we need to permit endpoint without security ...

@Configuration
public class SecurityConfig {

    private final String[] freeResourceUrls = {"/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs/**",
            "/swagger-resources/**", "/api-docs/**", "/aggregate/**", "/actuator/prometheus"};

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        return httpSecurity.authorizeHttpRequests(authorize -> authorize
                        .requestMatchers(freeResourceUrls)
                        .permitAll()
                        .anyRequest().authenticated())
                .oauth2ResourceServer(oauth2 -> oauth2.jwt(Customizer.withDefaults()))
                .build();
    }
}


Step 5: now try
http://localhost:9000/swagger-ui/index.html




Applying Circuit breaker
===========================
Applying circuitbreakers to API gateway:

step 1: add dep
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
        </dependency>
		
		
step 2: configure circuit breaker in the project
----------------------------------------------
# Actuator Endpoints
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilinece4j Properties
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

#Resilience4J Timeout Properties
resilience4j.timelimiter.configs.default.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.configs.default.max-attempts=3
resilience4j.retry.configs.default.wait-duration=2s


Step 3: define fallback routes:
------------------------------
@Configuration
public class Routes {
    @Bean
    public RouterFunction<ServerResponse> fallbackRoute() {
        return route("fallbackRoute")
                .GET("/fallbackRoute", request -> ServerResponse.status(HttpStatus.SERVICE_UNAVAILABLE)
                        .body("Service Unavailable, please try again later"))
                .build();
    }
}

Step 4: configure this routes for all communication:
-----------------------------------------------------
@Configuration
public class Routes {
    @Bean
    public RouterFunction<ServerResponse> productServiceRoute() {
        return GatewayRouterFunctions.route("product_service")
                .route(RequestPredicates.path("/api/product"), HandlerFunctions.http("http://localhost:8080))
                .filter(CircuitBreakerFilterFunctions.circuitBreaker("productServiceCircuitBreaker",
                        URI.create("forward:/fallbackRoute")))
                .build();
    }
	//.......
	//.........
}

Step 5: now observe circuit breaker
http://localhost:9000/actuator/health


Step 6: applying circuit breaker to the order service
------------------------------------------------------

step 6 a: add dependencies
-------------------------
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
        </dependency>
		
	
	
step 6 b: add configuration
-------------------------

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilinece4j Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5

#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

step 6 c: add configuration
-------------------------
@FeignClient(value = "inventory", url = "${inventory.url}", fallback = InventoryClientImpl.class)
public interface InventoryClient {
    @RequestMapping(method = RequestMethod.GET, value = "/api/inventory")
    boolean isInStock(@RequestParam String skuCode, @RequestParam Integer quantity);
}

@Service
public class InventoryClientImpl implements InventoryClient {
    @Override
    public boolean isInStock(String skuCode, Integer quantity) {
        return true;
    }
}




Kafka integration
=================
 //send the message to the kafka topic once the order is placed
 and notifications service recive the message and send a email to the customer
 
 
Step 1: update docker compose file
------------------------------------
 zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      #      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
	  
	  

step 2: add dependency to the order application
-----------------------------------
       <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
		
	
step 3: mentioned prop in application.properties file
------------------------------------------------------	
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=order-placed
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer


step 4: create POJO to hold the message
--------------------------------------
@Data
@NoArgsConstructor
public class OrderPlacedEvent {
    private String orderNumber;
    private String customerEmail;
}


step 4: send message 
---------------------
{

    private final OrderService orderService;
    private final InventoryClient inventoryClient;

    private final KafkaTemplate<String, OrderPlacedEvent> kafkaTemplate; // <key, value>

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public String placeOrder(@RequestBody OrderDto orderDto) {
        boolean isInStock = inventoryClient
                .isInStock(orderDto.getSkuCode(), orderDto.getQuantity());
        if (!isInStock) {
            throw new RuntimeException("Product is not in stock");
        }
        orderService.placeOrder(orderDto);
        //send the message to the kafka topic once the order is placed
        OrderPlacedEvent orderPlacedEvent = new OrderPlacedEvent();
        orderPlacedEvent.setOrderNumber(orderDto.getOrderNumber());
        orderPlacedEvent.setCustomerEmail(orderDto.getCustomerEmail());

        log.info("sending Order to Placed Event: {}", orderPlacedEvent);
        kafkaTemplate.send("order-placed", orderPlacedEvent);
        log.info("End Order to Placed Event: {}", orderPlacedEvent);
        return "Order Placed Successfully";
    }
}

step 5: go to http://localhost:8086/ ie UI for apache kafka
-------------------------------------------------------
http://localhost:8086/

Configure cluster:
-----------------
cluster name : localhost
broker server: broker
port : 29092

Now validate and enter 
go to dashboard and check Topics



step 6: now we need to create consumer service
ie notifications service (port 8083)
----------------------------------------------
 step 1: choose spring mvc , kafka dep, actuator, lombok
 
 step 2: add Dto into same package "com.orders.event"
 
	 @Data
	@NoArgsConstructor
	public class OrderPlacedEvent {
		private String orderNumber;
		private String customerEmail;;
	}

step 3: put kafka consumer properties in application.properties file

# Kafka Consumer Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=notification-service
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

step 4: Write consumer to consume message send by order asynchronously

@Service
@Slf4j
public class NotificationService {

    @KafkaListener(topics = "order-placed", groupId = "notification-service")
    public void sendNotification(OrderPlacedEvent orderPlacedEvent) {
        System.out.println(orderPlacedEvent);
        log.info("Sending notification to customer {} for order {}",
                orderPlacedEvent.getCustomerEmail(), orderPlacedEvent.getOrderNumber());
    }
}

		
		
Step 6: Configure fake email server account at 
https://mailtrap.io/ and send email to the customer
		
		
		





